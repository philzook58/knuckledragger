#!/usr/bin/env python3
"""
Generate timing reports for CI from pytest timing data.

This script reads the timing report generated by pytest and formats it
for display in GitHub Actions and other CI systems.
"""
import json
import sys
from pathlib import Path


def load_timing_report(report_path=".pytest_timing_report.json"):
    """Load the timing report JSON file."""
    path = Path(report_path)
    if not path.exists():
        print(f"Error: Timing report not found at {report_path}", file=sys.stderr)
        print("Run pytest first to generate timing data.", file=sys.stderr)
        sys.exit(1)
    
    with open(path) as f:
        return json.load(f)


def format_github_actions(report):
    """Format timing report for GitHub Actions output."""
    print("\n## 📊 Test Timing Report\n")
    
    # Summary section
    print("### Summary")
    print(f"- **Session Duration**: {report['session_duration']:.2f}s")
    print(f"- **Total Tests**: {report['total_tests']}")
    print(f"- **Total Test Time**: {report['summary']['total_test_time']:.2f}s")
    print(f"- **Average Test Time**: {report['summary']['avg_test_time']:.4f}s")
    print(f"- **Proof Events**: {report['summary']['proof_event_count']}")
    
    # Slowest tests
    print("\n### 🐌 Slowest Tests (Top 10)")
    print("| Rank | Duration | Test |")
    print("|------|----------|------|")
    
    for i, test in enumerate(report['slowest_tests'][:10], 1):
        nodeid = test['nodeid'].replace('|', '\\|')
        print(f"| {i} | {test['duration']:.4f}s | `{nodeid}` |")
    
    # Slowest proof operations
    if report['proof_events']:
        print("\n### ⚡ Slowest Proof Operations (Top 15)")
        print("| Duration | Category | Operation |")
        print("|----------|----------|-----------|")
        
        # Collect all proof events and sort
        all_proofs = []
        for tag, events in report['proof_events'].items():
            for event in events:
                all_proofs.append({
                    'tag': tag,
                    'duration': event['duration'],
                    'description': event['description']
                })
        
        all_proofs.sort(key=lambda x: x['duration'], reverse=True)
        
        for proof in all_proofs[:15]:
            desc = proof['description'][:80]
            if len(proof['description']) > 80:
                desc += "..."
            desc = desc.replace('|', '\\|')
            print(f"| {proof['duration']:.4f}s | `{proof['tag']}` | {desc} |")
    
    # Module breakdown if available
    print("\n### 📦 Test Module Statistics")
    module_stats = {}
    for test in report['all_tests']:
        module = test['nodeid'].split('::')[0]
        if module not in module_stats:
            module_stats[module] = {'count': 0, 'total_time': 0}
        module_stats[module]['count'] += 1
        module_stats[module]['total_time'] += test['duration']
    
    # Calculate average per module
    for module in module_stats:
        module_stats[module]['avg_time'] = (
            module_stats[module]['total_time'] / module_stats[module]['count']
        )
    
    # Sort by total time
    sorted_modules = sorted(
        module_stats.items(), 
        key=lambda x: x[1]['total_time'], 
        reverse=True
    )
    
    print("| Module | Tests | Total Time | Avg Time |")
    print("|--------|-------|------------|----------|")
    
    for module, stats in sorted_modules[:10]:
        print(f"| `{module}` | {stats['count']} | {stats['total_time']:.3f}s | {stats['avg_time']:.4f}s |")


def format_plain_text(report):
    """Format timing report as plain text."""
    print("\n" + "=" * 80)
    print("TEST TIMING REPORT")
    print("=" * 80)
    
    print(f"\nSession Duration: {report['session_duration']:.2f}s")
    print(f"Total Tests: {report['total_tests']}")
    print(f"Total Test Time: {report['summary']['total_test_time']:.2f}s")
    print(f"Average Test Time: {report['summary']['avg_test_time']:.4f}s")
    print(f"Proof Events Recorded: {report['summary']['proof_event_count']}")
    
    print("\n" + "-" * 80)
    print("TOP 20 SLOWEST TESTS")
    print("-" * 80)
    
    for i, test in enumerate(report['slowest_tests'][:20], 1):
        print(f"{i:3d}. {test['duration']:8.4f}s  {test['nodeid']}")
    
    if report['proof_events']:
        print("\n" + "-" * 80)
        print("SLOWEST PROOF OPERATIONS (Top 20)")
        print("-" * 80)
        
        all_proofs = []
        for tag, events in report['proof_events'].items():
            for event in events:
                all_proofs.append({
                    'tag': tag,
                    'duration': event['duration'],
                    'description': event['description']
                })
        
        all_proofs.sort(key=lambda x: x['duration'], reverse=True)
        
        for i, proof in enumerate(all_proofs[:20], 1):
            desc = proof['description']
            if len(desc) > 70:
                desc = desc[:67] + "..."
            print(f"{i:3d}. {proof['duration']:8.4f}s [{proof['tag']:15s}] {desc}")


def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Generate timing reports from pytest timing data"
    )
    parser.add_argument(
        '--format',
        choices=['github', 'plain'],
        default='github',
        help='Output format (default: github)'
    )
    parser.add_argument(
        '--report',
        default='.pytest_timing_report.json',
        help='Path to timing report JSON file'
    )
    
    args = parser.parse_args()
    
    report = load_timing_report(args.report)
    
    if args.format == 'github':
        format_github_actions(report)
    else:
        format_plain_text(report)


if __name__ == '__main__':
    main()
